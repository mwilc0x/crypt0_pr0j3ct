{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "compileAttributes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "drawSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_woolf",
          "type": "address"
        }
      ],
      "name": "setWoolf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "traitData",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "png",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "traitType",
          "type": "uint8"
        },
        {
          "internalType": "uint8[]",
          "name": "traitIds",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "png",
              "type": "string"
            }
          ],
          "internalType": "struct Traits.Trait[]",
          "name": "traits",
          "type": "tuple[]"
        }
      ],
      "name": "uploadTraits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "woolf",
      "outputs": [
        {
          "internalType": "contract IWoolf",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ad0d08893963a4638c4fd77d5265c4f0fef63356fa0a3ea8a453ce4735004dc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2775874",
    "logsBloom": "0x
    "blockHash": "0xbd02dc346dfb74cc882019a3f3382bd4a3119bb5db48cd58286f07fa73a06210",
    "transactionHash": "0x2ad0d08893963a4638c4fd77d5265c4f0fef63356fa0a3ea8a453ce4735004dc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x2ad0d08893963a4638c4fd77d5265c4f0fef63356fa0a3ea8a453ce4735004dc",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbd02dc346dfb74cc882019a3f3382bd4a3119bb5db48cd58286f07fa73a06210"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2775874",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "315e37d8f7c1459fe5b3e58ab9049cb3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"compileAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"drawSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_woolf\",\"type\":\"address\"}],\"name\":\"setWoolf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"traitType\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"traitIds\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"internalType\":\"struct Traits.Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"}],\"name\":\"uploadTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"woolf\",\"outputs\":[{\"internalType\":\"contract IWoolf\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"compileAttributes(uint256)\":{\"params\":{\"tokenId\":\"the ID of the token to compose the metadata for\"},\"returns\":{\"_0\":\"a JSON array of all of the attributes for given token ID\"}},\"drawSVG(uint256)\":{\"params\":{\"tokenId\":\"the ID of the token to generate an SVG for\"},\"returns\":{\"_0\":\"a valid SVG of the Sheep / Wolf\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"the ID of the token to generate the metadata for\"},\"returns\":{\"_0\":\"a base64 encoded JSON dictionary of the token's metadata and SVG\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uploadTraits(uint8,uint8[],(string,string)[])\":{\"params\":{\"traitType\":\"the trait type to upload the traits for (see traitTypes for a mapping)\",\"traits\":\"the names and base64 encoded PNGs for each trait\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"compileAttributes(uint256)\":{\"notice\":\"generates an array composed of all the individual traits and values\"},\"drawSVG(uint256)\":{\"notice\":\"generates an entire SVG by composing multiple <image> elements of PNGs\"},\"setWoolf(address)\":{\"notice\":\"ADMIN \"},\"tokenURI(uint256)\":{\"notice\":\"generates a base64 encoded metadata response without referencing off-chain content\"},\"uploadTraits(uint8,uint8[],(string,string)[])\":{\"notice\":\"administrative to upload the names and images associated with each trait\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Traits.sol\":\"Traits\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITraits {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfebf7cfef26ed32ad67a63f48174978d6e9f7e6577d77359f8498ce1b9099d1f\",\"license\":\"MIT LICENSE\"},\"contracts/IWoolf.sol\":{\"content\":\"// SPDX-License-Identifier: MIT License\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWoolf {\\n    // struct to store each token's traits\\n    struct SheepWolf {\\n        bool isSheep;\\n        uint8 fur;\\n        uint8 head;\\n        uint8 ears;\\n        uint8 eyes;\\n        uint8 nose;\\n        uint8 mouth;\\n        uint8 neck;\\n        uint8 feet;\\n        uint8 alphaIndex;\\n    }\\n\\n    function getPaidTokens() external view returns (uint256);\\n\\n    function getTokenTraits(uint256 tokenId) external view returns (SheepWolf memory);\\n}\\n\",\"keccak256\":\"0xda74aa04d56ab656fde3ee46c39436890f4877c8ed740eef586f872d7bdeacf9\",\"license\":\"MIT License\"},\"contracts/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./ITraits.sol\\\";\\nimport \\\"./IWoolf.sol\\\";\\n\\ncontract Traits is Ownable, ITraits {\\n    using Strings for uint256;\\n\\n    // struct to store each trait's data for metadata and rendering\\n    struct Trait {\\n        string name;\\n        string png;\\n    }\\n\\n    // mapping from trait type (index) to its name\\n    string[9] _traitTypes = [\\\"Fur\\\", \\\"Head\\\", \\\"Ears\\\", \\\"Eyes\\\", \\\"Nose\\\", \\\"Mouth\\\", \\\"Neck\\\", \\\"Feet\\\", \\\"Alpha\\\"];\\n    // storage of each traits name and base64 PNG data\\n    mapping(uint8 => mapping(uint8 => Trait)) public traitData;\\n    // mapping from alphaIndex to its score\\n    string[4] _alphas = [\\\"8\\\", \\\"7\\\", \\\"6\\\", \\\"5\\\"];\\n\\n    IWoolf public woolf;\\n\\n    constructor() {}\\n\\n    /** ADMIN */\\n\\n    function setWoolf(address _woolf) external onlyOwner {\\n        woolf = IWoolf(_woolf);\\n    }\\n\\n    /**\\n     * administrative to upload the names and images associated with each trait\\n     * @param traitType the trait type to upload the traits for (see traitTypes for a mapping)\\n     * @param traits the names and base64 encoded PNGs for each trait\\n     */\\n    function uploadTraits(\\n        uint8 traitType,\\n        uint8[] calldata traitIds,\\n        Trait[] calldata traits\\n    ) external onlyOwner {\\n        require(traitIds.length == traits.length, \\\"Mismatched inputs\\\");\\n        for (uint256 i = 0; i < traits.length; i++) {\\n            traitData[traitType][traitIds[i]] = Trait(traits[i].name, traits[i].png);\\n        }\\n    }\\n\\n    /** RENDER */\\n\\n    /**\\n     * generates an <image> element using base64 encoded PNGs\\n     * @param trait the trait storing the PNG data\\n     * @return the <image> element\\n     */\\n    function drawTrait(Trait memory trait) internal pure returns (string memory) {\\n        return string(abi.encodePacked('<image x=\\\"4\\\" y=\\\"4\\\" width=\\\"32\\\" height=\\\"32\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,', trait.png, '\\\"/>'));\\n    }\\n\\n    /**\\n     * generates an entire SVG by composing multiple <image> elements of PNGs\\n     * @param tokenId the ID of the token to generate an SVG for\\n     * @return a valid SVG of the Sheep / Wolf\\n     */\\n    function drawSVG(uint256 tokenId) public view returns (string memory) {\\n        IWoolf.SheepWolf memory s = woolf.getTokenTraits(tokenId);\\n        uint8 shift = s.isSheep ? 0 : 9;\\n\\n        string memory svgString = string(\\n            abi.encodePacked(\\n                drawTrait(traitData[0 + shift][s.fur]),\\n                s.isSheep ? drawTrait(traitData[1 + shift][s.head]) : drawTrait(traitData[1 + shift][s.alphaIndex]),\\n                s.isSheep ? drawTrait(traitData[2 + shift][s.ears]) : \\\"\\\",\\n                drawTrait(traitData[3 + shift][s.eyes]),\\n                s.isSheep ? drawTrait(traitData[4 + shift][s.nose]) : \\\"\\\",\\n                drawTrait(traitData[5 + shift][s.mouth]),\\n                s.isSheep ? \\\"\\\" : drawTrait(traitData[6 + shift][s.neck]),\\n                s.isSheep ? drawTrait(traitData[7 + shift][s.feet]) : \\\"\\\"\\n            )\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg id=\\\"woolf\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 40 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n                    svgString,\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * generates an attribute for the attributes array in the ERC721 metadata standard\\n     * @param traitType the trait type to reference as the metadata key\\n     * @param value the token's trait associated with the key\\n     * @return a JSON dictionary for the single attribute\\n     */\\n    function attributeForTypeAndValue(string memory traitType, string memory value) internal pure returns (string memory) {\\n        return string(abi.encodePacked('{\\\"trait_type\\\":\\\"', traitType, '\\\",\\\"value\\\":\\\"', value, '\\\"}'));\\n    }\\n\\n    /**\\n     * generates an array composed of all the individual traits and values\\n     * @param tokenId the ID of the token to compose the metadata for\\n     * @return a JSON array of all of the attributes for given token ID\\n     */\\n    function compileAttributes(uint256 tokenId) public view returns (string memory) {\\n        IWoolf.SheepWolf memory s = woolf.getTokenTraits(tokenId);\\n        string memory traits;\\n        if (s.isSheep) {\\n            traits = string(\\n                abi.encodePacked(\\n                    attributeForTypeAndValue(_traitTypes[0], traitData[0][s.fur].name),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(_traitTypes[1], traitData[1][s.head].name),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(_traitTypes[2], traitData[2][s.ears].name),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(_traitTypes[3], traitData[3][s.eyes].name),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(_traitTypes[4], traitData[4][s.nose].name),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(_traitTypes[5], traitData[5][s.mouth].name),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(_traitTypes[7], traitData[7][s.feet].name),\\n                    \\\",\\\"\\n                )\\n            );\\n        } else {\\n            traits = string(\\n                abi.encodePacked(\\n                    attributeForTypeAndValue(_traitTypes[0], traitData[9][s.fur].name),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(_traitTypes[1], traitData[10][s.alphaIndex].name),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(_traitTypes[3], traitData[12][s.eyes].name),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(_traitTypes[5], traitData[14][s.mouth].name),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(_traitTypes[6], traitData[15][s.neck].name),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\\"Alpha Score\\\", _alphas[s.alphaIndex]),\\n                    \\\",\\\"\\n                )\\n            );\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"[\\\",\\n                    traits,\\n                    '{\\\"trait_type\\\":\\\"Generation\\\",\\\"value\\\":',\\n                    tokenId <= woolf.getPaidTokens() ? '\\\"Gen 0\\\"' : '\\\"Gen 1\\\"',\\n                    '},{\\\"trait_type\\\":\\\"Type\\\",\\\"value\\\":',\\n                    s.isSheep ? '\\\"Sheep\\\"' : '\\\"Wolf\\\"',\\n                    \\\"}]\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * generates a base64 encoded metadata response without referencing off-chain content\\n     * @param tokenId the ID of the token to generate the metadata for\\n     * @return a base64 encoded JSON dictionary of the token's metadata and SVG\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        IWoolf.SheepWolf memory s = woolf.getTokenTraits(tokenId);\\n\\n        string memory metadata = string(\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                s.isSheep ? \\\"Sheep #\\\" : \\\"Wolf #\\\",\\n                tokenId.toString(),\\n                '\\\", \\\"description\\\": \\\"Thousands of Sheep and Wolves compete on a farm in the metaverse. A tempting prize of $WOOL awaits, with deadly high stakes. All the metadata and images are generated and stored 100% on-chain. No IPFS. NO API. Just the Ethereum blockchain.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                base64(bytes(drawSVG(tokenId))),\\n                '\\\", \\\"attributes\\\":',\\n                compileAttributes(tokenId),\\n                \\\"}\\\"\\n            )\\n        );\\n\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", base64(bytes(metadata))));\\n    }\\n\\n    /** BASE 64 - Written by Brech Devos */\\n\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function base64(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x41a9aeb91b6f87e01dbf43e348d3aaa525ca7bcdfa7e3115cae5c10d49e69bcd\",\"license\":\"MIT LICENSE\"}},\"version\":1}",
  "bytecode": "0x60036101a090815262233ab960e91b6101c052608090815260046101e0818152631219585960e21b6102005260a052610220818152634561727360e01b6102405260c052610260818152634579657360e01b6102805260e0526102a0818152634e6f736560e01b6102c0526101005260056102e08181526409adeeae8d60db1b6103005261012052610320828152634e65636b60e01b6103405261014052610360918252631199595d60e21b61038052610160919091526103e06040526103a090815264416c70686160d81b6103c05261018052620000e3906001906009620001d5565b506040805160c081018252600160808201818152600760fb1b60a0840152825282518084018452818152603760f81b6020828101919091528084019190915283518085018552828152601b60f91b81830152838501528351808501909452908352603560f81b9083015260608101919091526200016590600b9060046200022c565b503480156200017357600080fd5b506200017f3362000185565b620003b3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82600981019282156200021a579160200282015b828111156200021a57825180516200020991849160209091019062000271565b5091602001919060010190620001e9565b5062000228929150620002fc565b5090565b82600481019282156200021a579160200282015b828111156200021a57825180516200026091849160209091019062000271565b509160200191906001019062000240565b8280546200027f9062000376565b90600052602060002090601f016020900481019282620002a35760008555620002ee565b82601f10620002be57805160ff1916838001178555620002ee565b82800160010185558215620002ee579182015b82811115620002ee578251825591602001919060010190620002d1565b50620002289291506200031d565b808211156200022857600062000313828262000334565b50600101620002fc565b5b808211156200022857600081556001016200031e565b508054620003429062000376565b6000825580601f1062000353575050565b601f0160209004906000526020600020908101906200037391906200031d565b50565b600181811c908216806200038b57607f821691505b60208210811415620003ad57634e487b7160e01b600052602260045260246000fd5b50919050565b612b3c80620003c36000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101235780639bf2ee3514610134578063c87b56dd14610155578063d93ae3d914610168578063f2fde38b1461017b57600080fd5b8063265c3cdc146100a357806368dba5e5146100d35780636d6015a8146100f3578063715018a6146101085780637abecb8614610110575b600080fd5b600f546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e66100e1366004611f90565b61018e565b6040516100ca9190612858565b610106610101366004611e9b565b610ef2565b005b610106610f47565b6100e661011e366004611f90565b610f7d565b6000546001600160a01b03166100b6565b61014761014236600461205c565b61153a565b6040516100ca92919061286b565b6100e6610163366004611f90565b611671565b610106610176366004611fdc565b6117a6565b610106610189366004611e9b565b6119bc565b600f546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101406040518083038186803b1580156101d957600080fd5b505afa1580156101ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102119190611ec9565b905060608160000151156108dd5761037d6001600001805461023290612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461025e90612a21565b80156102ab5780601f10610280576101008083540402835291602001916102ab565b820191906000526020600020905b81548152906001019060200180831161028e57829003601f168201915b50506000808052600a60209081528881015160ff1682527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e390526040902080549093506102fa92509050612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461032690612a21565b80156103735780601f1061034857610100808354040283529160200191610373565b820191906000526020600020905b81548152906001019060200180831161035657829003601f168201915b5050505050611a57565b61045a60018001805461038f90612a21565b80601f01602080910402602001604051908101604052809291908181526020018280546103bb90612a21565b80156104085780601f106103dd57610100808354040283529160200191610408565b820191906000526020600020905b8154815290600101906020018083116103eb57829003601f168201915b505060016000908152600a602090815260408a81015160ff1683527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7909152902080549093506102fa92509050612a21565b6105386001600201805461046d90612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461049990612a21565b80156104e65780601f106104bb576101008083540402835291602001916104e6565b820191906000526020600020905b8154815290600101906020018083116104c957829003601f168201915b505060026000908152600a602090815260608b015160ff1682527fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba890526040902080549093506102fa92509050612a21565b6106166001600301805461054b90612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461057790612a21565b80156105c45780601f10610599576101008083540402835291602001916105c4565b820191906000526020600020905b8154815290600101906020018083116105a757829003601f168201915b505060036000908152600a602090815260808c015160ff1682527fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa3975990526040902080549093506102fa92509050612a21565b6106f46001600401805461062990612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461065590612a21565b80156106a25780601f10610677576101008083540402835291602001916106a2565b820191906000526020600020905b81548152906001019060200180831161068557829003601f168201915b505060046000908152600a602090815260a08d015160ff1682527fe1eb2b2161a492c07c5a334e48012567cba93ec021043f53c1955516a3c5a84190526040902080549093506102fa92509050612a21565b6107d26001600501805461070790612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461073390612a21565b80156107805780601f1061075557610100808354040283529160200191610780565b820191906000526020600020905b81548152906001019060200180831161076357829003601f168201915b505060056000908152600a602090815260c08e015160ff1682527ff35035bc2b01d44bd35a1dcdc552315cffb73da35cfd60570b7b777f98036f9f90526040902080549093506102fa92509050612a21565b6108b1600160070180546107e590612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461081190612a21565b801561085e5780601f106108335761010080835404028352916020019161085e565b820191906000526020600020905b81548152906001019060200180831161084157829003601f168201915b505060076000908152600a60209081526101008f015160ff1682527f22e39f61d1e4986b4f116cea9067f62cc77d74dff1780ae9c8b5166d1dd2882990526040902080549093506102fa92509050612a21565b6040516020016108c79796959493929190612246565b6040516020818303038152906040529050610db4565b6109ba600160000180546108f090612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461091c90612a21565b80156109695780601f1061093e57610100808354040283529160200191610969565b820191906000526020600020905b81548152906001019060200180831161094c57829003601f168201915b505060096000908152600a60209081528881015160ff1682527f825eb4cda6b8b44578c55770496c59e6dc3cf2235f690bcdaf51a61898ceb28490526040902080549093506102fa92509050612a21565b610a976001800180546109cc90612a21565b80601f01602080910402602001604051908101604052809291908181526020018280546109f890612a21565b8015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b5050600a600081815260209182526101208a015160ff1681527f3e57c57b03145299956be61386751c5b285d460d484d5c2403a6be086d9d6baa9091526040902080549093506102fa92509050612a21565b610b7560016003018054610aaa90612a21565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad690612a21565b8015610b235780601f10610af857610100808354040283529160200191610b23565b820191906000526020600020905b815481529060010190602001808311610b0657829003601f168201915b5050600c6000908152600a602090815260808b015160ff1682527f80283cfdc74729ecb224822f7a02837fb1d52df7cc3435ae86bb6e025f6e06fa90526040902080549093506102fa92509050612a21565b610c5360016005018054610b8890612a21565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb490612a21565b8015610c015780601f10610bd657610100808354040283529160200191610c01565b820191906000526020600020905b815481529060010190602001808311610be457829003601f168201915b5050600e6000908152600a602090815260c08c015160ff1682527f95e5396155afd2ec086edc0518f3069d6ba131fb95388521b3342aebbda916f090526040902080549093506102fa92509050612a21565b610d3160016006018054610c6690612a21565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9290612a21565b8015610cdf5780601f10610cb457610100808354040283529160200191610cdf565b820191906000526020600020905b815481529060010190602001808311610cc257829003601f168201915b5050600f6000908152600a602090815260e08d015160ff1682527fcc8dc71342d3ea7c205feea2d040f8f577a07edda8d6b43a4daf11d5e7fd280a90526040902080549093506102fa92509050612a21565b610d8d6040518060400160405280600b81526020016a416c7068612053636f726560a81b815250600b89610120015160ff1660048110610d8157634e487b7160e01b600052603260045260246000fd5b0180546102fa90612a21565b604051602001610da296959493929190612181565b60405160208183030381529060405290505b600f5460408051630803163f60e31b8152905183926001600160a01b031691634018b1f8916004808301926020929190829003018186803b158015610df857600080fd5b505afa158015610e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e309190611fa8565b851115610e5c57604051806040016040528060078152602001661123b2b710189160c91b815250610e7d565b604051806040016040528060078152602001661123b2b710181160c91b8152505b8351610ea75760405180604001604052806006815260200165112bb7b6331160d11b815250610ec8565b604051806040016040528060078152602001661129b432b2b81160c91b8152505b604051602001610eda93929190612557565b60405160208183030381529060405292505050919050565b6000546001600160a01b03163314610f255760405162461bcd60e51b8152600401610f1c90612899565b60405180910390fd5b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610f715760405162461bcd60e51b8152600401610f1c90612899565b610f7b6000611a83565b565b600f546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101406040518083038186803b158015610fc857600080fd5b505afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110009190611ec9565b905060008160000151611014576009611017565b60005b9050600061118e600a8261102b8582612982565b60ff1660ff1681526020019081526020016000206000856020015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b80601f01602080910402602001604051908101604052809291908181526020018280546110a190612a21565b80156110ee5780601f106110c3576101008083540402835291602001916110ee565b820191906000526020600020905b8154815290600101906020018083116110d157829003601f168201915b5050505050815260200160018201805461110790612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461113390612a21565b80156111805780601f1061115557610100808354040283529160200191611180565b820191906000526020600020905b81548152906001019060200180831161116357829003601f168201915b505050505081525050611ad3565b83516111f6576111f1600a60006111a6866001612982565b60ff1660ff168152602001908152602001600020600086610120015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b611252565b611252600a6000611208866001612982565b60ff1660ff1681526020019081526020016000206000866040015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b845161126d57604051806020016040528060008152506112c9565b6112c9600a600061127f876002612982565b60ff1660ff1681526020019081526020016000206000876060015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b611325600a60006112db886003612982565b60ff1660ff1681526020019081526020016000206000886080015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b8651611340576040518060200160405280600081525061139c565b61139c600a6000611352896004612982565b60ff1660ff16815260200190815260200160002060008960a0015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b6113f8600a60006113ae8a6005612982565b60ff1660ff16815260200190815260200160002060008a60c0015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b885161145f5761145a600a60006114108b6006612982565b60ff1660ff16815260200190815260200160002060008b60e0015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b611470565b604051806020016040528060008152505b895161148b57604051806020016040528060008152506114e8565b6114e8600a600061149d8c6007612982565b60ff1660ff16815260200190815260200160002060008c610100015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b6040516020016114ff9897969594939291906120dc565b6040516020818303038152906040529050806040516020016115219190612325565b6040516020818303038152906040529350505050919050565b600a60209081526000928352604080842090915290825290208054819061156090612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461158c90612a21565b80156115d95780601f106115ae576101008083540402835291602001916115d9565b820191906000526020600020905b8154815290600101906020018083116115bc57829003601f168201915b5050505050908060010180546115ee90612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461161a90612a21565b80156116675780601f1061163c57610100808354040283529160200191611667565b820191906000526020600020905b81548152906001019060200180831161164a57829003601f168201915b5050505050905082565b600f546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101406040518083038186803b1580156116bc57600080fd5b505afa1580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f49190611ec9565b9050600081600001516117255760405180604001604052806006815260200165576f6c66202360d01b815250611746565b604051806040016040528060078152602001665368656570202360c81b8152505b61174f85611b00565b61176061175b87610f7d565b611c22565b6117698761018e565b60405160200161177c9493929190612616565b604051602081830303815290604052905061179681611c22565b604051602001610eda9190612813565b6000546001600160a01b031633146117d05760405162461bcd60e51b8152600401610f1c90612899565b8281146118135760405162461bcd60e51b81526020600482015260116024820152704d69736d61746368656420696e7075747360781b6044820152606401610f1c565b60005b818110156119b457604051806040016040528084848481811061184957634e487b7160e01b600052603260045260246000fd5b905060200281019061185b9190612913565b61186590806128ce565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020018484848181106118bf57634e487b7160e01b600052603260045260246000fd5b90506020028101906118d19190612913565b6118df9060208101906128ce565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505060ff89168152600a60205260408120915087878581811061194657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061195b9190611fc0565b60ff16815260208082019290925260400160002082518051919261198492849290910190611d98565b50602082810151805161199d9260018501920190611d98565b5090505080806119ac90612a5c565b915050611816565b505050505050565b6000546001600160a01b031633146119e65760405162461bcd60e51b8152600401610f1c90612899565b6001600160a01b038116611a4b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610f1c565b611a5481611a83565b50565b60608282604051602001611a6c9291906124e6565b604051602081830303815290604052905092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608160200151604051602001611aea9190612412565b6040516020818303038152906040529050919050565b606081611b245750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611b4e5780611b3881612a5c565b9150611b479050600a836129a7565b9150611b28565b60008167ffffffffffffffff811115611b7757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ba1576020820181803683370190505b5090505b8415611c1a57611bb66001836129da565b9150611bc3600a86612a77565b611bce90603061296a565b60f81b818381518110611bf157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611c13600a866129a7565b9450611ba5565b949350505050565b6060815160001415611c4257505060408051602081019091526000815290565b6000604051806060016040528060408152602001612ac76040913990506000600384516002611c71919061296a565b611c7b91906129a7565b611c869060046129bb565b90506000611c9582602061296a565b67ffffffffffffffff811115611cbb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ce5576020820181803683370190505b509050818152600183018586518101602084015b81831015611d535760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611cf9565b600389510660018114611d6d5760028114611d7e57611d8a565b613d3d60f01b600119830152611d8a565b603d60f81b6000198301525b509398975050505050505050565b828054611da490612a21565b90600052602060002090601f016020900481019282611dc65760008555611e0c565b82601f10611ddf57805160ff1916838001178555611e0c565b82800160010185558215611e0c579182015b82811115611e0c578251825591602001919060010190611df1565b50611e18929150611e1c565b5090565b5b80821115611e185760008155600101611e1d565b60008083601f840112611e42578182fd5b50813567ffffffffffffffff811115611e59578182fd5b6020830191508360208260051b8501011115611e7457600080fd5b9250929050565b80518015158114611e8b57600080fd5b919050565b8051611e8b81612ab7565b600060208284031215611eac578081fd5b81356001600160a01b0381168114611ec2578182fd5b9392505050565b60006101408284031215611edb578081fd5b611ee3612932565b611eec83611e7b565b8152611efa60208401611e90565b6020820152611f0b60408401611e90565b6040820152611f1c60608401611e90565b6060820152611f2d60808401611e90565b6080820152611f3e60a08401611e90565b60a0820152611f4f60c08401611e90565b60c0820152611f6060e08401611e90565b60e0820152610100611f73818501611e90565b90820152610120611f85848201611e90565b908201529392505050565b600060208284031215611fa1578081fd5b5035919050565b600060208284031215611fb9578081fd5b5051919050565b600060208284031215611fd1578081fd5b8135611ec281612ab7565b600080600080600060608688031215611ff3578081fd5b8535611ffe81612ab7565b9450602086013567ffffffffffffffff8082111561201a578283fd5b61202689838a01611e31565b9096509450604088013591508082111561203e578283fd5b5061204b88828901611e31565b969995985093965092949392505050565b6000806040838503121561206e578182fd5b823561207981612ab7565b9150602083013561208981612ab7565b809150509250929050565b600081518084526120ac8160208601602086016129f1565b601f01601f19169290920160200192915050565b600081516120d28185602086016129f1565b9290920192915050565b6000895160206120ef8285838f016129f1565b8a51918401916121028184848f016129f1565b8a519201916121148184848e016129f1565b89519201916121268184848d016129f1565b88519201916121388184848c016129f1565b875192019161214a8184848b016129f1565b865192019161215c8184848a016129f1565b855192019161216e81848489016129f1565b919091019b9a5050505050505050505050565b6000875160206121948285838d016129f1565b8184019150600b60fa1b80835289516121b38160018601858e016129f1565b6001930192830181905288516121cf8160028601858d016129f1565b6002930192830181905287516121eb8160038601858c016129f1565b6003930192830181905286516122078160048601858b016129f1565b6004930192830152845161222181600585018489016129f1565b612237600582850101600b60fa1b815260010190565b9b9a5050505050505050505050565b6000885160206122598285838e016129f1565b8184019150600b60fa1b8083528a516122788160018601858f016129f1565b6001930192830181905289516122948160028601858e016129f1565b6002930192830181905288516122b08160038601858d016129f1565b6003930192830181905287516122cc8160048601858c016129f1565b600493019283015285516122e68160058501848a016129f1565b612315612308612302600584870101600b60fa1b815260010190565b886120c0565b600b60fa1b815260010190565b9c9b505050505050505050505050565b7f3c7376672069643d22776f6f6c66222077696474683d2231303025222068656981527f6768743d2231303025222076657273696f6e3d22312e31222076696577426f7860208201527f3d223020302034302034302220786d6c6e733d22687474703a2f2f7777772e7760408201527f332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d2268747460608201527f703a2f2f7777772e77332e6f72672f313939392f786c696e6b223e00000000006080820152600082516123f581609b8501602087016129f1565b651e17b9bb339f60d11b609b93909101928301525060a101919050565b7f3c696d61676520783d22342220793d2234222077696474683d2233322220686581527f696768743d2233322220696d6167652d72656e646572696e673d22706978656c60208201527f6174656422207072657365727665417370656374526174696f3d22784d69645960408201527f4d69642220786c696e6b3a687265663d22646174613a696d6167652f706e673b60608201526618985cd94d8d0b60ca1b6080820152600082516124cc8160878501602087016129f1565b6211179f60e91b6087939091019283015250608a01919050565b6e3d913a3930b4ba2fba3cb832911d1160891b8152825160009061251181600f8501602088016129f1565b6a1116113b30b63ab2911d1160a91b600f91840191820152835161253c81601a8401602088016129f1565b61227d60f01b601a9290910191820152601c01949350505050565b605b60f81b8152600084516125738160018501602089016129f1565b7f7b2274726169745f74797065223a2247656e65726174696f6e222c2276616c756001918401918201526232911d60e91b602182015284516125bc8160248401602089016129f1565b7f7d2c7b2274726169745f74797065223a2254797065222c2276616c7565223a006024929091019182015283516125fa8160438401602088016129f1565b617d5d60f01b6043929091019182015260450195945050505050565b693d913730b6b2911d101160b11b8152845160009061263c81600a850160208a016129f1565b85519083019061265381600a840160208a016129f1565b7f222c20226465736372697074696f6e223a202254686f7573616e6473206f6620600a92909101918201527f536865657020616e6420576f6c76657320636f6d70657465206f6e2061206661602a8201527f726d20696e20746865206d65746176657273652e20412074656d7074696e6720604a8201527f7072697a65206f662024574f4f4c206177616974732c20776974682064656164606a8201527f6c792068696768207374616b65732e20416c6c20746865206d65746164617461608a8201527f20616e6420696d61676573206172652067656e65726174656420616e6420737460aa8201527f6f7265642031303025206f6e2d636861696e2e204e6f20495046532e204e4f2060ca8201527f4150492e204a7573742074686520457468657265756d20626c6f636b6368616960ea8201527f6e2e222c2022696d616765223a2022646174613a696d6167652f7376672b786d61010a820152681b0ed8985cd94d8d0b60ba1b61012a8201526128086127fb6127f56127d96101338501896120c0565b6f1116101130ba3a3934b13aba32b9911d60811b815260100190565b866120c0565b607d60f81b815260010190565b979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161284b81601d8501602087016129f1565b91909101601d0192915050565b602081526000611ec26020830184612094565b60408152600061287e6040830185612094565b82810360208401526128908185612094565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000808335601e198436030181126128e4578283fd5b83018035915067ffffffffffffffff8211156128fe578283fd5b602001915036819003821315611e7457600080fd5b60008235603e19833603018112612928578182fd5b9190910192915050565b604051610140810167ffffffffffffffff8111828210171561296457634e487b7160e01b600052604160045260246000fd5b60405290565b6000821982111561297d5761297d612a8b565b500190565b600060ff821660ff84168060ff0382111561299f5761299f612a8b565b019392505050565b6000826129b6576129b6612aa1565b500490565b60008160001904831182151516156129d5576129d5612a8b565b500290565b6000828210156129ec576129ec612a8b565b500390565b60005b83811015612a0c5781810151838201526020016129f4565b83811115612a1b576000848401525b50505050565b600181811c90821680612a3557607f821691505b60208210811415612a5657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612a7057612a70612a8b565b5060010190565b600082612a8657612a86612aa1565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60ff81168114611a5457600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220c402b3c03d164f7266cc6476b36402ffd49bfbadaafac9e0f39df978805a16d964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101235780639bf2ee3514610134578063c87b56dd14610155578063d93ae3d914610168578063f2fde38b1461017b57600080fd5b8063265c3cdc146100a357806368dba5e5146100d35780636d6015a8146100f3578063715018a6146101085780637abecb8614610110575b600080fd5b600f546100b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e66100e1366004611f90565b61018e565b6040516100ca9190612858565b610106610101366004611e9b565b610ef2565b005b610106610f47565b6100e661011e366004611f90565b610f7d565b6000546001600160a01b03166100b6565b61014761014236600461205c565b61153a565b6040516100ca92919061286b565b6100e6610163366004611f90565b611671565b610106610176366004611fdc565b6117a6565b610106610189366004611e9b565b6119bc565b600f546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101406040518083038186803b1580156101d957600080fd5b505afa1580156101ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102119190611ec9565b905060608160000151156108dd5761037d6001600001805461023290612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461025e90612a21565b80156102ab5780601f10610280576101008083540402835291602001916102ab565b820191906000526020600020905b81548152906001019060200180831161028e57829003601f168201915b50506000808052600a60209081528881015160ff1682527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e390526040902080549093506102fa92509050612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461032690612a21565b80156103735780601f1061034857610100808354040283529160200191610373565b820191906000526020600020905b81548152906001019060200180831161035657829003601f168201915b5050505050611a57565b61045a60018001805461038f90612a21565b80601f01602080910402602001604051908101604052809291908181526020018280546103bb90612a21565b80156104085780601f106103dd57610100808354040283529160200191610408565b820191906000526020600020905b8154815290600101906020018083116103eb57829003601f168201915b505060016000908152600a602090815260408a81015160ff1683527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bc7909152902080549093506102fa92509050612a21565b6105386001600201805461046d90612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461049990612a21565b80156104e65780601f106104bb576101008083540402835291602001916104e6565b820191906000526020600020905b8154815290600101906020018083116104c957829003601f168201915b505060026000908152600a602090815260608b015160ff1682527fbff4442b8ed600beeb8e26b1279a0f0d14c6edfaec26d968ee13c86f7d4c2ba890526040902080549093506102fa92509050612a21565b6106166001600301805461054b90612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461057790612a21565b80156105c45780601f10610599576101008083540402835291602001916105c4565b820191906000526020600020905b8154815290600101906020018083116105a757829003601f168201915b505060036000908152600a602090815260808c015160ff1682527fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa3975990526040902080549093506102fa92509050612a21565b6106f46001600401805461062990612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461065590612a21565b80156106a25780601f10610677576101008083540402835291602001916106a2565b820191906000526020600020905b81548152906001019060200180831161068557829003601f168201915b505060046000908152600a602090815260a08d015160ff1682527fe1eb2b2161a492c07c5a334e48012567cba93ec021043f53c1955516a3c5a84190526040902080549093506102fa92509050612a21565b6107d26001600501805461070790612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461073390612a21565b80156107805780601f1061075557610100808354040283529160200191610780565b820191906000526020600020905b81548152906001019060200180831161076357829003601f168201915b505060056000908152600a602090815260c08e015160ff1682527ff35035bc2b01d44bd35a1dcdc552315cffb73da35cfd60570b7b777f98036f9f90526040902080549093506102fa92509050612a21565b6108b1600160070180546107e590612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461081190612a21565b801561085e5780601f106108335761010080835404028352916020019161085e565b820191906000526020600020905b81548152906001019060200180831161084157829003601f168201915b505060076000908152600a60209081526101008f015160ff1682527f22e39f61d1e4986b4f116cea9067f62cc77d74dff1780ae9c8b5166d1dd2882990526040902080549093506102fa92509050612a21565b6040516020016108c79796959493929190612246565b6040516020818303038152906040529050610db4565b6109ba600160000180546108f090612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461091c90612a21565b80156109695780601f1061093e57610100808354040283529160200191610969565b820191906000526020600020905b81548152906001019060200180831161094c57829003601f168201915b505060096000908152600a60209081528881015160ff1682527f825eb4cda6b8b44578c55770496c59e6dc3cf2235f690bcdaf51a61898ceb28490526040902080549093506102fa92509050612a21565b610a976001800180546109cc90612a21565b80601f01602080910402602001604051908101604052809291908181526020018280546109f890612a21565b8015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b5050600a600081815260209182526101208a015160ff1681527f3e57c57b03145299956be61386751c5b285d460d484d5c2403a6be086d9d6baa9091526040902080549093506102fa92509050612a21565b610b7560016003018054610aaa90612a21565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad690612a21565b8015610b235780601f10610af857610100808354040283529160200191610b23565b820191906000526020600020905b815481529060010190602001808311610b0657829003601f168201915b5050600c6000908152600a602090815260808b015160ff1682527f80283cfdc74729ecb224822f7a02837fb1d52df7cc3435ae86bb6e025f6e06fa90526040902080549093506102fa92509050612a21565b610c5360016005018054610b8890612a21565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb490612a21565b8015610c015780601f10610bd657610100808354040283529160200191610c01565b820191906000526020600020905b815481529060010190602001808311610be457829003601f168201915b5050600e6000908152600a602090815260c08c015160ff1682527f95e5396155afd2ec086edc0518f3069d6ba131fb95388521b3342aebbda916f090526040902080549093506102fa92509050612a21565b610d3160016006018054610c6690612a21565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9290612a21565b8015610cdf5780601f10610cb457610100808354040283529160200191610cdf565b820191906000526020600020905b815481529060010190602001808311610cc257829003601f168201915b5050600f6000908152600a602090815260e08d015160ff1682527fcc8dc71342d3ea7c205feea2d040f8f577a07edda8d6b43a4daf11d5e7fd280a90526040902080549093506102fa92509050612a21565b610d8d6040518060400160405280600b81526020016a416c7068612053636f726560a81b815250600b89610120015160ff1660048110610d8157634e487b7160e01b600052603260045260246000fd5b0180546102fa90612a21565b604051602001610da296959493929190612181565b60405160208183030381529060405290505b600f5460408051630803163f60e31b8152905183926001600160a01b031691634018b1f8916004808301926020929190829003018186803b158015610df857600080fd5b505afa158015610e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e309190611fa8565b851115610e5c57604051806040016040528060078152602001661123b2b710189160c91b815250610e7d565b604051806040016040528060078152602001661123b2b710181160c91b8152505b8351610ea75760405180604001604052806006815260200165112bb7b6331160d11b815250610ec8565b604051806040016040528060078152602001661129b432b2b81160c91b8152505b604051602001610eda93929190612557565b60405160208183030381529060405292505050919050565b6000546001600160a01b03163314610f255760405162461bcd60e51b8152600401610f1c90612899565b60405180910390fd5b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610f715760405162461bcd60e51b8152600401610f1c90612899565b610f7b6000611a83565b565b600f546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101406040518083038186803b158015610fc857600080fd5b505afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110009190611ec9565b905060008160000151611014576009611017565b60005b9050600061118e600a8261102b8582612982565b60ff1660ff1681526020019081526020016000206000856020015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b80601f01602080910402602001604051908101604052809291908181526020018280546110a190612a21565b80156110ee5780601f106110c3576101008083540402835291602001916110ee565b820191906000526020600020905b8154815290600101906020018083116110d157829003601f168201915b5050505050815260200160018201805461110790612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461113390612a21565b80156111805780601f1061115557610100808354040283529160200191611180565b820191906000526020600020905b81548152906001019060200180831161116357829003601f168201915b505050505081525050611ad3565b83516111f6576111f1600a60006111a6866001612982565b60ff1660ff168152602001908152602001600020600086610120015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b611252565b611252600a6000611208866001612982565b60ff1660ff1681526020019081526020016000206000866040015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b845161126d57604051806020016040528060008152506112c9565b6112c9600a600061127f876002612982565b60ff1660ff1681526020019081526020016000206000876060015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b611325600a60006112db886003612982565b60ff1660ff1681526020019081526020016000206000886080015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b8651611340576040518060200160405280600081525061139c565b61139c600a6000611352896004612982565b60ff1660ff16815260200190815260200160002060008960a0015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b6113f8600a60006113ae8a6005612982565b60ff1660ff16815260200190815260200160002060008a60c0015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b885161145f5761145a600a60006114108b6006612982565b60ff1660ff16815260200190815260200160002060008b60e0015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b611470565b604051806020016040528060008152505b895161148b57604051806020016040528060008152506114e8565b6114e8600a600061149d8c6007612982565b60ff1660ff16815260200190815260200160002060008c610100015160ff1660ff16815260200190815260200160002060405180604001604052908160008201805461107590612a21565b6040516020016114ff9897969594939291906120dc565b6040516020818303038152906040529050806040516020016115219190612325565b6040516020818303038152906040529350505050919050565b600a60209081526000928352604080842090915290825290208054819061156090612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461158c90612a21565b80156115d95780601f106115ae576101008083540402835291602001916115d9565b820191906000526020600020905b8154815290600101906020018083116115bc57829003601f168201915b5050505050908060010180546115ee90612a21565b80601f016020809104026020016040519081016040528092919081815260200182805461161a90612a21565b80156116675780601f1061163c57610100808354040283529160200191611667565b820191906000526020600020905b81548152906001019060200180831161164a57829003601f168201915b5050505050905082565b600f546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101406040518083038186803b1580156116bc57600080fd5b505afa1580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f49190611ec9565b9050600081600001516117255760405180604001604052806006815260200165576f6c66202360d01b815250611746565b604051806040016040528060078152602001665368656570202360c81b8152505b61174f85611b00565b61176061175b87610f7d565b611c22565b6117698761018e565b60405160200161177c9493929190612616565b604051602081830303815290604052905061179681611c22565b604051602001610eda9190612813565b6000546001600160a01b031633146117d05760405162461bcd60e51b8152600401610f1c90612899565b8281146118135760405162461bcd60e51b81526020600482015260116024820152704d69736d61746368656420696e7075747360781b6044820152606401610f1c565b60005b818110156119b457604051806040016040528084848481811061184957634e487b7160e01b600052603260045260246000fd5b905060200281019061185b9190612913565b61186590806128ce565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020018484848181106118bf57634e487b7160e01b600052603260045260246000fd5b90506020028101906118d19190612913565b6118df9060208101906128ce565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505060ff89168152600a60205260408120915087878581811061194657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061195b9190611fc0565b60ff16815260208082019290925260400160002082518051919261198492849290910190611d98565b50602082810151805161199d9260018501920190611d98565b5090505080806119ac90612a5c565b915050611816565b505050505050565b6000546001600160a01b031633146119e65760405162461bcd60e51b8152600401610f1c90612899565b6001600160a01b038116611a4b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610f1c565b611a5481611a83565b50565b60608282604051602001611a6c9291906124e6565b604051602081830303815290604052905092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608160200151604051602001611aea9190612412565b6040516020818303038152906040529050919050565b606081611b245750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611b4e5780611b3881612a5c565b9150611b479050600a836129a7565b9150611b28565b60008167ffffffffffffffff811115611b7757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ba1576020820181803683370190505b5090505b8415611c1a57611bb66001836129da565b9150611bc3600a86612a77565b611bce90603061296a565b60f81b818381518110611bf157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611c13600a866129a7565b9450611ba5565b949350505050565b6060815160001415611c4257505060408051602081019091526000815290565b6000604051806060016040528060408152602001612ac76040913990506000600384516002611c71919061296a565b611c7b91906129a7565b611c869060046129bb565b90506000611c9582602061296a565b67ffffffffffffffff811115611cbb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ce5576020820181803683370190505b509050818152600183018586518101602084015b81831015611d535760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611cf9565b600389510660018114611d6d5760028114611d7e57611d8a565b613d3d60f01b600119830152611d8a565b603d60f81b6000198301525b509398975050505050505050565b828054611da490612a21565b90600052602060002090601f016020900481019282611dc65760008555611e0c565b82601f10611ddf57805160ff1916838001178555611e0c565b82800160010185558215611e0c579182015b82811115611e0c578251825591602001919060010190611df1565b50611e18929150611e1c565b5090565b5b80821115611e185760008155600101611e1d565b60008083601f840112611e42578182fd5b50813567ffffffffffffffff811115611e59578182fd5b6020830191508360208260051b8501011115611e7457600080fd5b9250929050565b80518015158114611e8b57600080fd5b919050565b8051611e8b81612ab7565b600060208284031215611eac578081fd5b81356001600160a01b0381168114611ec2578182fd5b9392505050565b60006101408284031215611edb578081fd5b611ee3612932565b611eec83611e7b565b8152611efa60208401611e90565b6020820152611f0b60408401611e90565b6040820152611f1c60608401611e90565b6060820152611f2d60808401611e90565b6080820152611f3e60a08401611e90565b60a0820152611f4f60c08401611e90565b60c0820152611f6060e08401611e90565b60e0820152610100611f73818501611e90565b90820152610120611f85848201611e90565b908201529392505050565b600060208284031215611fa1578081fd5b5035919050565b600060208284031215611fb9578081fd5b5051919050565b600060208284031215611fd1578081fd5b8135611ec281612ab7565b600080600080600060608688031215611ff3578081fd5b8535611ffe81612ab7565b9450602086013567ffffffffffffffff8082111561201a578283fd5b61202689838a01611e31565b9096509450604088013591508082111561203e578283fd5b5061204b88828901611e31565b969995985093965092949392505050565b6000806040838503121561206e578182fd5b823561207981612ab7565b9150602083013561208981612ab7565b809150509250929050565b600081518084526120ac8160208601602086016129f1565b601f01601f19169290920160200192915050565b600081516120d28185602086016129f1565b9290920192915050565b6000895160206120ef8285838f016129f1565b8a51918401916121028184848f016129f1565b8a519201916121148184848e016129f1565b89519201916121268184848d016129f1565b88519201916121388184848c016129f1565b875192019161214a8184848b016129f1565b865192019161215c8184848a016129f1565b855192019161216e81848489016129f1565b919091019b9a5050505050505050505050565b6000875160206121948285838d016129f1565b8184019150600b60fa1b80835289516121b38160018601858e016129f1565b6001930192830181905288516121cf8160028601858d016129f1565b6002930192830181905287516121eb8160038601858c016129f1565b6003930192830181905286516122078160048601858b016129f1565b6004930192830152845161222181600585018489016129f1565b612237600582850101600b60fa1b815260010190565b9b9a5050505050505050505050565b6000885160206122598285838e016129f1565b8184019150600b60fa1b8083528a516122788160018601858f016129f1565b6001930192830181905289516122948160028601858e016129f1565b6002930192830181905288516122b08160038601858d016129f1565b6003930192830181905287516122cc8160048601858c016129f1565b600493019283015285516122e68160058501848a016129f1565b612315612308612302600584870101600b60fa1b815260010190565b886120c0565b600b60fa1b815260010190565b9c9b505050505050505050505050565b7f3c7376672069643d22776f6f6c66222077696474683d2231303025222068656981527f6768743d2231303025222076657273696f6e3d22312e31222076696577426f7860208201527f3d223020302034302034302220786d6c6e733d22687474703a2f2f7777772e7760408201527f332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d2268747460608201527f703a2f2f7777772e77332e6f72672f313939392f786c696e6b223e00000000006080820152600082516123f581609b8501602087016129f1565b651e17b9bb339f60d11b609b93909101928301525060a101919050565b7f3c696d61676520783d22342220793d2234222077696474683d2233322220686581527f696768743d2233322220696d6167652d72656e646572696e673d22706978656c60208201527f6174656422207072657365727665417370656374526174696f3d22784d69645960408201527f4d69642220786c696e6b3a687265663d22646174613a696d6167652f706e673b60608201526618985cd94d8d0b60ca1b6080820152600082516124cc8160878501602087016129f1565b6211179f60e91b6087939091019283015250608a01919050565b6e3d913a3930b4ba2fba3cb832911d1160891b8152825160009061251181600f8501602088016129f1565b6a1116113b30b63ab2911d1160a91b600f91840191820152835161253c81601a8401602088016129f1565b61227d60f01b601a9290910191820152601c01949350505050565b605b60f81b8152600084516125738160018501602089016129f1565b7f7b2274726169745f74797065223a2247656e65726174696f6e222c2276616c756001918401918201526232911d60e91b602182015284516125bc8160248401602089016129f1565b7f7d2c7b2274726169745f74797065223a2254797065222c2276616c7565223a006024929091019182015283516125fa8160438401602088016129f1565b617d5d60f01b6043929091019182015260450195945050505050565b693d913730b6b2911d101160b11b8152845160009061263c81600a850160208a016129f1565b85519083019061265381600a840160208a016129f1565b7f222c20226465736372697074696f6e223a202254686f7573616e6473206f6620600a92909101918201527f536865657020616e6420576f6c76657320636f6d70657465206f6e2061206661602a8201527f726d20696e20746865206d65746176657273652e20412074656d7074696e6720604a8201527f7072697a65206f662024574f4f4c206177616974732c20776974682064656164606a8201527f6c792068696768207374616b65732e20416c6c20746865206d65746164617461608a8201527f20616e6420696d61676573206172652067656e65726174656420616e6420737460aa8201527f6f7265642031303025206f6e2d636861696e2e204e6f20495046532e204e4f2060ca8201527f4150492e204a7573742074686520457468657265756d20626c6f636b6368616960ea8201527f6e2e222c2022696d616765223a2022646174613a696d6167652f7376672b786d61010a820152681b0ed8985cd94d8d0b60ba1b61012a8201526128086127fb6127f56127d96101338501896120c0565b6f1116101130ba3a3934b13aba32b9911d60811b815260100190565b866120c0565b607d60f81b815260010190565b979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161284b81601d8501602087016129f1565b91909101601d0192915050565b602081526000611ec26020830184612094565b60408152600061287e6040830185612094565b82810360208401526128908185612094565b95945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000808335601e198436030181126128e4578283fd5b83018035915067ffffffffffffffff8211156128fe578283fd5b602001915036819003821315611e7457600080fd5b60008235603e19833603018112612928578182fd5b9190910192915050565b604051610140810167ffffffffffffffff8111828210171561296457634e487b7160e01b600052604160045260246000fd5b60405290565b6000821982111561297d5761297d612a8b565b500190565b600060ff821660ff84168060ff0382111561299f5761299f612a8b565b019392505050565b6000826129b6576129b6612aa1565b500490565b60008160001904831182151516156129d5576129d5612a8b565b500290565b6000828210156129ec576129ec612a8b565b500390565b60005b83811015612a0c5781810151838201526020016129f4565b83811115612a1b576000848401525b50505050565b600181811c90821680612a3557607f821691505b60208210811415612a5657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612a7057612a70612a8b565b5060010190565b600082612a8657612a86612aa1565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60ff81168114611a5457600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220c402b3c03d164f7266cc6476b36402ffd49bfbadaafac9e0f39df978805a16d964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "compileAttributes(uint256)": {
        "params": {
          "tokenId": "the ID of the token to compose the metadata for"
        },
        "returns": {
          "_0": "a JSON array of all of the attributes for given token ID"
        }
      },
      "drawSVG(uint256)": {
        "params": {
          "tokenId": "the ID of the token to generate an SVG for"
        },
        "returns": {
          "_0": "a valid SVG of the Sheep / Wolf"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "the ID of the token to generate the metadata for"
        },
        "returns": {
          "_0": "a base64 encoded JSON dictionary of the token's metadata and SVG"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uploadTraits(uint8,uint8[],(string,string)[])": {
        "params": {
          "traitType": "the trait type to upload the traits for (see traitTypes for a mapping)",
          "traits": "the names and base64 encoded PNGs for each trait"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "compileAttributes(uint256)": {
        "notice": "generates an array composed of all the individual traits and values"
      },
      "drawSVG(uint256)": {
        "notice": "generates an entire SVG by composing multiple <image> elements of PNGs"
      },
      "setWoolf(address)": {
        "notice": "ADMIN "
      },
      "tokenURI(uint256)": {
        "notice": "generates a base64 encoded metadata response without referencing off-chain content"
      },
      "uploadTraits(uint8,uint8[],(string,string)[])": {
        "notice": "administrative to upload the names and images associated with each trait"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4019,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_traitTypes",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)9_storage"
      },
      {
        "astId": 4026,
        "contract": "contracts/Traits.sol:Traits",
        "label": "traitData",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint8,t_mapping(t_uint8,t_struct(Trait)4005_storage))"
      },
      {
        "astId": 4035,
        "contract": "contracts/Traits.sol:Traits",
        "label": "_alphas",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_string_storage)4_storage"
      },
      {
        "astId": 4038,
        "contract": "contracts/Traits.sol:Traits",
        "label": "woolf",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IWoolf)3987"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)4_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_string_storage)9_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[9]",
        "numberOfBytes": "288"
      },
      "t_contract(IWoolf)3987": {
        "encoding": "inplace",
        "label": "contract IWoolf",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_mapping(t_uint8,t_struct(Trait)4005_storage))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(uint8 => struct Traits.Trait))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_struct(Trait)4005_storage)"
      },
      "t_mapping(t_uint8,t_struct(Trait)4005_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct Traits.Trait)",
        "numberOfBytes": "32",
        "value": "t_struct(Trait)4005_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Trait)4005_storage": {
        "encoding": "inplace",
        "label": "struct Traits.Trait",
        "members": [
          {
            "astId": 4002,
            "contract": "contracts/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4004,
            "contract": "contracts/Traits.sol:Traits",
            "label": "png",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}