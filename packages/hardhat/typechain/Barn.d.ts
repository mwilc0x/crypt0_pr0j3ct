/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BarnInterface extends ethers.utils.Interface {
  functions: {
    "DAILY_WOOL_RATE()": FunctionFragment;
    "MAXIMUM_GLOBAL_WOOL()": FunctionFragment;
    "MAX_ALPHA()": FunctionFragment;
    "MINIMUM_TO_EXIT()": FunctionFragment;
    "WOOL_CLAIM_TAX_PERCENTAGE()": FunctionFragment;
    "addManyToBarnAndPack(address,uint16[])": FunctionFragment;
    "barn(uint256)": FunctionFragment;
    "claimManyFromBarnAndPack(uint16[],bool)": FunctionFragment;
    "isSheep(uint256)": FunctionFragment;
    "lastClaimTimestamp()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pack(uint256,uint256)": FunctionFragment;
    "packIndices(uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "randomWolfOwner(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescue(uint256[])": FunctionFragment;
    "rescueEnabled()": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setRescueEnabled(bool)": FunctionFragment;
    "totalAlphaStaked()": FunctionFragment;
    "totalSheepStaked()": FunctionFragment;
    "totalWoolEarned()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unaccountedRewards()": FunctionFragment;
    "woolPerAlpha()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DAILY_WOOL_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_GLOBAL_WOOL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_ALPHA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_TO_EXIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WOOL_CLAIM_TAX_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addManyToBarnAndPack",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "barn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimManyFromBarnAndPack",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isSheep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pack",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "packIndices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomWolfOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescue",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setRescueEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAlphaStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSheepStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWoolEarned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unaccountedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "woolPerAlpha",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DAILY_WOOL_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_GLOBAL_WOOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_ALPHA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_TO_EXIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WOOL_CLAIM_TAX_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManyToBarnAndPack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "barn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimManyFromBarnAndPack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSheep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packIndices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomWolfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rescueEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRescueEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAlphaStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSheepStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWoolEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unaccountedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "woolPerAlpha",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SheepClaimed(uint256,uint256,bool)": EventFragment;
    "TokenStaked(address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WolfClaimed(uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SheepClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WolfClaimed"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type SheepClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, boolean] & {
    tokenId: BigNumber;
    earned: BigNumber;
    unstaked: boolean;
  }
>;

export type TokenStakedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    owner: string;
    tokenId: BigNumber;
    value: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WolfClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, boolean] & {
    tokenId: BigNumber;
    earned: BigNumber;
    unstaked: boolean;
  }
>;

export class Barn extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BarnInterface;

  functions: {
    DAILY_WOOL_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXIMUM_GLOBAL_WOOL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ALPHA(overrides?: CallOverrides): Promise<[number]>;

    MINIMUM_TO_EXIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    WOOL_CLAIM_TAX_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addManyToBarnAndPack(
      account: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    barn(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        tokenId: number;
        value: BigNumber;
        owner: string;
      }
    >;

    claimManyFromBarnAndPack(
      tokenIds: BigNumberish[],
      unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isSheep(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { sheep: boolean }>;

    lastClaimTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      from: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pack(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        tokenId: number;
        value: BigNumber;
        owner: string;
      }
    >;

    packIndices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    randomWolfOwner(
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescue(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    setPaused(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRescueEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAlphaStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSheepStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWoolEarned(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unaccountedRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    woolPerAlpha(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DAILY_WOOL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  MAXIMUM_GLOBAL_WOOL(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ALPHA(overrides?: CallOverrides): Promise<number>;

  MINIMUM_TO_EXIT(overrides?: CallOverrides): Promise<BigNumber>;

  WOOL_CLAIM_TAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  addManyToBarnAndPack(
    account: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  barn(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, string] & {
      tokenId: number;
      value: BigNumber;
      owner: string;
    }
  >;

  claimManyFromBarnAndPack(
    tokenIds: BigNumberish[],
    unstake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isSheep(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  lastClaimTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    from: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pack(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, string] & {
      tokenId: number;
      value: BigNumber;
      owner: string;
    }
  >;

  packIndices(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  randomWolfOwner(
    seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescue(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueEnabled(overrides?: CallOverrides): Promise<boolean>;

  setPaused(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRescueEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAlphaStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalSheepStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalWoolEarned(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unaccountedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  woolPerAlpha(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DAILY_WOOL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_GLOBAL_WOOL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ALPHA(overrides?: CallOverrides): Promise<number>;

    MINIMUM_TO_EXIT(overrides?: CallOverrides): Promise<BigNumber>;

    WOOL_CLAIM_TAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    addManyToBarnAndPack(
      account: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    barn(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        tokenId: number;
        value: BigNumber;
        owner: string;
      }
    >;

    claimManyFromBarnAndPack(
      tokenIds: BigNumberish[],
      unstake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    isSheep(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    lastClaimTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      from: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pack(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        tokenId: number;
        value: BigNumber;
        owner: string;
      }
    >;

    packIndices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    randomWolfOwner(
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescue(tokenIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    rescueEnabled(overrides?: CallOverrides): Promise<boolean>;

    setPaused(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    setRescueEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAlphaStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalSheepStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalWoolEarned(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unaccountedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    woolPerAlpha(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "SheepClaimed(uint256,uint256,bool)"(
      tokenId?: null,
      earned?: null,
      unstaked?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { tokenId: BigNumber; earned: BigNumber; unstaked: boolean }
    >;

    SheepClaimed(
      tokenId?: null,
      earned?: null,
      unstaked?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { tokenId: BigNumber; earned: BigNumber; unstaked: boolean }
    >;

    "TokenStaked(address,uint256,uint256)"(
      owner?: null,
      tokenId?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; tokenId: BigNumber; value: BigNumber }
    >;

    TokenStaked(
      owner?: null,
      tokenId?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; tokenId: BigNumber; value: BigNumber }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "WolfClaimed(uint256,uint256,bool)"(
      tokenId?: null,
      earned?: null,
      unstaked?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { tokenId: BigNumber; earned: BigNumber; unstaked: boolean }
    >;

    WolfClaimed(
      tokenId?: null,
      earned?: null,
      unstaked?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { tokenId: BigNumber; earned: BigNumber; unstaked: boolean }
    >;
  };

  estimateGas: {
    DAILY_WOOL_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_GLOBAL_WOOL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ALPHA(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_TO_EXIT(overrides?: CallOverrides): Promise<BigNumber>;

    WOOL_CLAIM_TAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    addManyToBarnAndPack(
      account: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    barn(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimManyFromBarnAndPack(
      tokenIds: BigNumberish[],
      unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isSheep(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastClaimTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      from: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pack(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packIndices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    randomWolfOwner(
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescue(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    setPaused(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRescueEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAlphaStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalSheepStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalWoolEarned(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unaccountedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    woolPerAlpha(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DAILY_WOOL_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXIMUM_GLOBAL_WOOL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ALPHA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_TO_EXIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WOOL_CLAIM_TAX_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addManyToBarnAndPack(
      account: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    barn(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimManyFromBarnAndPack(
      tokenIds: BigNumberish[],
      unstake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isSheep(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastClaimTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pack(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    packIndices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomWolfOwner(
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescue(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPaused(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRescueEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAlphaStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSheepStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWoolEarned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unaccountedRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    woolPerAlpha(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
